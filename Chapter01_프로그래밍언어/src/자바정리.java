/*
 * 자바 설치
 * 1. jdk 다운로드
 * 	  -> http://java.jdk.net
 * 2. 편집기 
 * 	  -> https://eclpse.org
 * 3. 자바 환경설정
 * 	  -> 내PC -> 속성 -> 고급 시스템 설정
 * 		=> classpath : 자바에서 제공하는 라이브러리 사용
 * 		   classpath = .;c:\jdk-17.0.2\lib
 * 		=> path : 실행 => path = c:\jdk-17.0.2\bin
 * 	  => JVM (자바 가상머신)
 * -------------------------------
 * 일반 프로그램		자바 프로그램
 *   프로그램			  프로그램
 *     |				|
 *   운영체제			   JVM => jdk => 실제 실행속도가 느릴 수 있음
 *     |				|					   | 네트워크 서버(x), 인트라넷(o)
 *   하드웨어			  운영체제								ex) 사내 메신저
 *   					|
 *   				  하드웨어
 * -------------------------------
 * 	 JDK
 *  --------
 *   JRE		-------------------
 *  --------	Development Tool
 *   JVM    	-------------------
 *  --------	Development Library
 *   Library	-------------------
 *  --------
 *  
 *  -------------------------------
 *  1. Development Tool
 *     javac : 컴퓨터가 인식하는 언어로 변경
 *     		   (컴파일)
 *     java : 프로그램 실행(인터프리터)
 *     		  => 한줄씩 읽어서 출력
 *     javap : 역컴파일러 => 자바로 원상 복구
 *     javah : header 파일 읽기 => C/C++ 연동
 *     javaw : 서버 구동 
 *     jar : 인증/배포 파일
 *           웹 배포 파일 : war -> maven
 *           자바 배포 파일 : jar -> gradle => 라이브러리 
 *           			   zip => atr
 *  2. JRE : 라이브러리를 포함하고 있음
 *  
 *  동적방식
 *  			  javac						java
 *  A.java ================== A.class ================ 화면 실행
 *  프로그래머		  컴파일					   인터프리터
 *    배포 => .class 파일 => war/jar
 *    C/C++       |
 *    		모든 운영체제에서 동일한 파일을 생성
 *    		=> 운영체제에 호환성이 좋음
 *     | 컴파일 내용이 틀림 -> 해당 운영체제에서 컴파일을 다시 한다
 *     
 *  자바로 제작 가능
 *  1. 웹 개발 : JSP***
 *  2. 모바일 프로그램 : Android
 *  3. 게임 : swing/javaFx
 *  특징 
 *  1. 모든 운영체제에서 같은 소스로 사용 가능
 *  2. 객체지향 프로그램 => 조립식
 *  - 프로그래머 : 이미 만들어진 소스로 조립하는 역할
 *  - 개발자 : 새롭게 만드는 역할
 *  3. 메모리 자동 정리 : 스택영역(메모리 처리)
 *     -> GC(Garbage Collection)
 *  4. 라이브러리가 풍부
 *  ------------------------------------
 *  소스코딩
 *  프로젝트명
 *     |
 *     - src
 *     	  | - .java => 클래스명과 동일한 파일명 필요
 *     		  class A => A.java
 *     		  ** 한 파일 안에 여러개의 클래스를 만들 수 있음
 *     		  class A
 *     		  class B
 *     		  ------- A.java / B.java
 *     		  class A
 *     		  public class B
 *     		  --------------- B.java
 *     - jre => 버전
 *     
 *     => 규칙(약속)
 *     	  1. 클래스명 : 대문자 시작
 *     				  MainClass
 *     				  -   -두번째 단어 시작 대문자 시작
 *     				  => 헝거리안식 표현법
 *     				  _Main : 임시 파일
 *     	  2. 메소드명 : 소문자 시작 => 기능처리
 *     	  3. 변수명 : 소문자 시작 => 필요한 데이터를 메모리에 저장
 *        4. 인터페이스 : 대문자 시작 => 다른 클래스 연결(리모컨)
 *        ------------ 가독성(수정이 편리)
 *        			   최적화(속도 빠르게)
 *        			   메모리 관리
 *     => 들여쓰기 : 파이썬 / yml(설정파일)
*/  
public class 자바정리 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
}
